<?php


class XAutoloadUnitTestCase extends DrupalUnitTestCase {

  static function getInfo() {
    return array(
      'name' => 'X Autoload unit test',
      'description' => 'Test the xautoload class finder.',
      'group' => 'X Autoload',
    );
  }

  function assertPublic($status, $message) {
    return $this->assert($status, $message);
  }

  function setUp() {
    drupal_load('module', 'xautoload');
    // Make sure we use the regular loader, not the APC one.
    // Also make sure to prepend this one. Otherwise, the core class loader will
    // try to load xautoload-related stuff, e.g. xautoload_Mock_* stuff, and
    // will fail due to the database.
    xautoload('loaders')->register('default', TRUE);
    parent::setUp();
  }

  function testBasics() {
    $msg = 'spl_autoload_functions():';
    foreach (spl_autoload_functions() as $f) {
      if (is_array($f)) {
        list($obj, $method) = $f;
        if (is_object($obj)) {
          $str = get_class($obj) . '->' . $method . '()';
        }
        else {
          $str = $obj . '::' . $method . '()';
        }
      }
      else {
        $str = $f;
      }
      $msg .= "\n  " . $str;
    }
    // It is useful to know the current autoload stack, so we print it.
    debug($msg);
  }

  function testNsRegNested() {
    $finder = new xautoload_ClassFinder_NamespaceOrPrefix();
    $finder->registerNamespaceDeep('Drupal\\menu_block', 'sites/all/modules/contrib/menu_block/lib');
    $finder->registerPrefixDeep('menu_block', 'sites/all/modules/contrib/menu_block/lib');

    $this->_findClass($finder, 'Drupal\\menu_block\\Abc_Def', array(
      'sites/all/modules/contrib/menu_block/lib/Abc/Def.php',
    ));
    $this->_findClass($finder, 'menu_block_Abc_Def', array(
      'sites/all/modules/contrib/menu_block/lib/Abc/Def.php',
    ));
  }

  function testNsReg() {
    $finder = new xautoload_ClassFinder_NamespaceOrPrefix();
    $finder->registerNamespaceDeep('Drupal\\dqx_adminmenu', 'sites/all/modules/contrib/dqx_adminmenu/lib');
    $finder->registerNamespaceRoot('Drupal\\dqx_adminmenu', 'sites/all/modules/contrib/dqx_adminmenu/vendor');
    $finder->registerPrefixDeep('dqx_adminmenu', 'sites/all/modules/contrib/dqx_adminmenu/lib');
    $finder->registerPrefixRoot('dqx_adminmenu', 'sites/all/modules/contrib/dqx_adminmenu/vendor');

    $this->_findClass($finder, 'Drupal\\dqx_adminmenu\\Abc_Def', array(
      'sites/all/modules/contrib/dqx_adminmenu/lib/Abc/Def.php',
      'sites/all/modules/contrib/dqx_adminmenu/vendor/Drupal/dqx_adminmenu/Abc/Def.php',
    ));
    $this->_findClass($finder, 'dqx_adminmenu_Abc_Def', array(
      'sites/all/modules/contrib/dqx_adminmenu/lib/Abc/Def.php',
      // Yes, this is how prefix-root works: The _ in the module name becomes a dir separator.
      'sites/all/modules/contrib/dqx_adminmenu/vendor/dqx/adminmenu/Abc/Def.php',
    ));

  }

  protected function _findClass($finder, $class, array $expectedSuggestions) {
    for ($iAccept = 0; $iAccept < count($expectedSuggestions); ++$iAccept) {
      $api = new xautoload_Mock_InjectedAPI_findFile($this, $class, $expectedSuggestions, $iAccept);
      $finder->findFile($api, $class);
      $api->finish();
    }
    $api = new xautoload_Mock_InjectedAPI_findFile($this, $class, $expectedSuggestions);
    $finder->findFile($api, $class);
    $api->finish();
    $this->assert(TRUE, "Successfully loaded $class");
  }
}
